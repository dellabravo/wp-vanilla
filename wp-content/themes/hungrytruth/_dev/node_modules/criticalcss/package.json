{
  "name": "criticalcss",
  "description": "Finds the Above the Fold CSS for your page, and outputs it into a file",
  "version": "0.6.1",
  "homepage": "https://github.com/filamentgroup/criticalcss",
  "author": {
    "name": "Scott Jehl/Jeffrey Lembeck/Filament Group",
    "email": "hello@filamentgroup.com",
    "url": "http://filamentgroup.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/filamentgroup/criticalcss.git"
  },
  "bugs": {
    "url": "https://github.com/filamentgroup/criticalcss/issues"
  },
  "bin": {
    "criticalcss": "bin/critical.js"
  },
  "main": "./critical.js",
  "license": "MIT",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "node node_modules/.bin/grunt test"
  },
  "dependencies": {
    "phantomjs": "^1.9.17",
    "yargs": "^3.10.0"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-connect": "0.8.0",
    "grunt-contrib-jshint": "^0.11.0",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-contrib-qunit": "^0.5.2",
    "grunt-contrib-watch": "^0.6.1",
    "phantom-unit": "0.1.1"
  },
  "keywords": [],
  "readme": "# CriticalCSS\n\n[![Filament Group](http://filamentgroup.com/images/fg-logo-positive-sm-crop.png) ](http://www.filamentgroup.com/)\n\nFinds the Above the Fold CSS for your page, and outputs it into a file\n\n## Getting Started\nInstall the module with: `npm install criticalcss`\n\n```javascript\nvar criticalcss = require(\"criticalcss\");\n\ncriticalcss.findCritical(\"path/to/file/or/url\", options (only rules required), function(err, output){\n\tif( err ){\n\t\tthrow new Error( err );\n\t} else {\n\t\tfs.writeFileSync( filename, output );\n  }\n});\n\ncriticalcss.getRules(\"path/to/css/file/\", function(err, output){\n\tif( err ){\n\t\tthrow new Error( err );\n\t} else {\n\t\tfs.writeFileSync( filename, output );\n  }\n});\n\n```\n\nUsing both together:\n\n```JavaScript\nvar request = require('request');\nvar path = require( 'path' );\nvar criticalcss = require(\"criticalcss\");\nvar fs = require('fs');\nvar tmpDir = require('os').tmpdir();\n\nvar cssUrl = 'http://site.com/style.css';\nvar cssPath = path.join( tmpDir, 'style.css' );\nrequest(cssUrl).pipe(fs.createWriteStream(cssPath)).on('close', function() {\n  criticalcss.getRules(cssPath, function(err, output) {\n    if (err) {\n      throw new Error(err);\n    } else {\n      criticalcss.findCritical(\"https://site.com/\", { rules: JSON.parse(output) }, function(err, output) {\n        if (err) {\n          throw new Error(err);\n        } else {\n          console.log(output);\n        }\n      });\n    }\n  });\n});\n```\n\n## Documentation\n`.findCritical`\n\nTakes url or path to file, an options hash, and a callback function\n\n### Default values for options hash\n\n* `width`:  1200;\n* `height`: 900;\n* `forceInclude`: [];\n* `rules`: []; // REQUIRED\n* `buffer`: 800*1024;\n* `ignoreConsole`: false;\n\n#### options.width\nType: `Integer`\nDefault value: `1200`\n\nThe width of the window being used for determining \"above the fold\"\n\n#### options.height\nType: `Integer`\nDefault value: `900`\n\nThe height of the window being used for determining \"above the fold\"\n\n#### options.forceInclude\nType: `Array`\nDefault value: `[]`\n\nAn array of selectors that should be included in the critical css no\nmatter what. This is sometimes necessary with js-enhanced components.\n\n#### options.rules\nType: `Array`\nDefault value: `[]`\n\nA `JSON.stringify`d version of a\n[CSSRuleList](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList)\n\n#### options.buffer\nType: `Integer`\nDefault value: `800*1024`\n\nSets the `maxBuffer` for [child_process.execFile](http://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback) in Node.\nNecessary for potential memory issues.\n\n#### options.ignoreConsole\nType: `Boolean`\nDefault value: `false`\n\nSince criticalCSS handles output from STDOUT, it will also catch any\noutputs to `console` that are in the JavaScript on a page. If set to\n`true`, those will be silenced.\n\n`.getRules`\n\nTakes a path to the CSS file and a callback function and returns a `JSON.stringify`'d subset of a `CSSRuleList`\n\n### Default values for options hash\n\n* `buffer`: 800*1024;\n\n## CLI?\n\nSure, we got that.\n\n```\n\nCommands:\n  run  Run criticalcss\n\nOptions:\n  --help                   Show help                                   [boolean]\n  -u, --url                The url you would like to run criticalcss against\n                                                             [string] [required]\n  -f, --file               The local css file you're referencing for criticalcss\n                                                             [string] [required]\n  -w, --width              The width of your viewport            [default: 1200]\n  -h, --height             The height of your viewport            [default: 900]\n  -o, --output             The name of your output css file\n                                             [string] [default: \"dist/dist.css\"]\n  -b, --buffer             Specifies the largest amount of data allowed on\n                           stdout or stderr - if this value is exceeded then the\n                           child process is killed             [default: 819200]\n  --force, --forceInclude  Sometimes selectors need to be forced into the\n                           criticalcss                     [array] [default: []]\n  -i, --ignoreConsole      Criticalcss will pick up console errors, set this to\n                           ignore them                [boolean] [default: false]\n\n```\n## Examples\nCheck out the tests!\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n* v0.6.0 - Add a CLI version\n* v0.5.0 - Add `ignoreConsole` option\n* v0.4.0 - Moved to using a local filename for `getRules` and moved to passing in a required `Array` of rules into the options hash on `findCritical`\n* v0.3.0 - Added `forceInclude` functionality. This allows the user to\n  pass in an array of strings that are selectors. These selectors, if\nfound in the CSS, will be treated as though they are above the fold and\nwill therefore be automatically included.\n* v0.2.0 - Refactor\n* v0.1.0 - Hey, released this thing\n\n## License\nCopyright (c) 2014 Scott Jehl/Jeffrey Lembeck/Filament Group\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "criticalcss@0.6.1",
  "_shasum": "c439c075cea53800e673b9f7b9d60b8a44a879e3",
  "_from": "criticalcss@0.6.1",
  "_resolved": "https://registry.npmjs.org/criticalcss/-/criticalcss-0.6.1.tgz"
}
