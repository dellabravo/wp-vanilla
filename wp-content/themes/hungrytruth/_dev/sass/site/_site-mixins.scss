@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}

// Media Query: Breakpoints for Layout
@mixin mq($mq-breakpoint, $mq-breakpoints: $breakpoints) {
  // If $mq-breakpoint is a key that exists in
  // $mq-breakpoints, get and use the value
  @if map-has-key($mq-breakpoints, $mq-breakpoint) {
    $mq-breakpoint: map-get($mq-breakpoints, $mq-breakpoint);
  }
  
  @media screen and (min-width: #{$mq-breakpoint}) {
    @content;
  }
}

@mixin proxima-nova { 
  font-family: "ProximaNova-Regular", sans-serif;
}

@mixin proxima-nova-semibold { 
  font-family: "ProximaNova-Semibold", sans-serif;
}

@mixin proxima-nova-bold { 
  font-family: "ProximaNova-Bold", sans-serif;
}


@mixin vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

@mixin center() {
	margin-left: auto;
  margin-right: auto;
}

// animation underline
@mixin underline {
  position: relative;
  text-decoration: none;
  &:before {
    content: "";
    position: absolute;
    width: 100%;
    height: 1px;
    bottom: -3px;
    left: 0;
    background-color: $black;
    visibility: hidden;
    transform: scaleX(0);
    transition: all $animation-duration $animation-type 10ms;
  }
  &:hover {
    &:before {
      visibility: visible;
      transform: scaleX(1);
    }
  }
}

@mixin when-legible() {
  @media(min-width: $screen-lg-min) and (max-width: $screen-xl) {
    @content;
  }
}

@mixin xl-up() {
  @media(min-width: $screen-xl + 1) {
    @content;
  }
}
@mixin xxl-up() {
  @media(min-width: $screen-xxl) {
    @content;
  }
}

@mixin tab-port(){
  @media(min-width: $screen-sm-min) and (max-width: $screen-md-max) {
    @content;
  }
}

@mixin fdl-arrow($color :$primary, $size: $fdl-arrow-size, $dir: right) {
  &:after {
    content: "";
    @include inline-block;
    @include triangle($size, $color, $dir);
  }
}

@mixin user-select($select) { user-select: $select }

@mixin fix-float(){
  &:after {
    content:" ";display: block;visibility: hidden;height:0;clear:both;
  }
}

@mixin reset-link {
  text-decoration: none; font-weight: 600;
}
@mixin translate3d($x, $y, $z) { transform: translate3d($x, $y, $z) }

@mixin transition-transform($transition...) { transition: transform $transition }

@mixin font-color($color, $opacity: 1) {
  color: $color;
  color: rgba($color, $opacity);
}
@mixin reset-p {
  font-weight: normal;
  @include rm(font-size, 1.6rem);
  @include rm(line-height, 1.8rem);
  margin-bottom: 0;
}
@mixin justified-img {
  max-width: 100%; max-height: 100%;
}

/*
  Pages::common::mixins
*/
@mixin article-adjust {
  width: 83%; @include center;
}
@mixin reset-grid-padding() {
  padding: 0;
  @include sm-up {
    &:first-child {padding-left: $grid-gutter-width / 2}
    &:last-child {padding-right: $grid-gutter-width / 2}
  }
}